---
- name: Install required packages
  yum:
    name: "{{ packages }}"
    state: present
    update_cache: true
  vars:
    packages:
      - python-botocore
      - python-boto3
      - gtk2
      - xorg-x11-apps
      - xorg-x11-xauth
      - vim-common

- block:
  - name: make .aws directory
    file:
      path: "/home/{{ ansible_user }}/.aws"
      mode: 0700
      state: directory
    become: no

  - name: create credentials
    shell: |
      echo "[default]" > /home/{{ ansible_user }}/.aws/credentials
      echo "aws_access_key_id = {{ aws_access_key_id }}" >> /home/{{ ansible_user }}/.aws/credentials
      echo "aws_secret_access_key = {{ aws_secret_key }}" >> /home/{{ ansible_user }}/.aws/credentials
    args:
      creates: "/home/{{ ansible_user }}/.aws/credentials"
    become: no

  - name: Simple GET operation
    aws_s3:
      bucket: "{{ s3_bucket }}"
      object: "{{ s3_object_path }}/{{ item }}"
      dest: "/tmp/{{ item }}"
      mode: get
      retries: 3
    with_items: "{{ datical_binaries }}"
    become: no
  always:

  - name: remove .aws directory
    file:
      path: "/home/{{ ansible_user }}/.aws"
      state: absent
    become: no

- name: copy datical install file
  copy:
    src: datical_install.xml
    dest: /tmp/datical_install.xml

- name: make datical directory
  file:
    path: "/opt/datical"
    mode: 0755
    state: directory
    owner: centos
    group: centos
  become: yes

- name: Install Datical
  shell: |
    env PATH=/opt/datical/DaticalDB/repl:$PATH java -jar {{ datical_software }} datical_install.xml
    cp /tmp/{{ datical_license }} /opt/datical/DaticalDB
    cp /tmp/{{ datical_license }} /opt/datical/DaticalDB/repl
    env PATH=/opt/datical/DaticalDB/repl:$PATH hammer installDrivers http://update.datical.com/2019.2.2/thirdparty
    env PATH=/opt/datical/DaticalDB/repl:$PATH hammer show license
    env PATH=/opt/datical/DaticalDB/repl:$PATH hammer checkDrivers
  args:
    chdir: /tmp
  register: datical_install

- debug:
    msg: "{{ datical_install }}"

- name: Config Datical
  shell: |
    xauth add ${HOST}:0 . $(xxd -l 16 -p /dev/urandom)
    sudo chown -R jenkins.jenkins /opt/datical
    sudo chmod -R g+rwX /opt/datical
    sudo -H -u jenkins env PATH=/opt/datical/DaticalDB/repl:$PATH hammer installLicense /opt/datical/license/datical.lic
    sudo -H -u jenkins env PATH=/opt/datical/DaticalDB/repl:$PATH hammer show license
    sudo -H -u jenkins env PATH=/opt/datical/DaticalDB/repl:$PATH hammer checkDrivers
  become: no

- name: setup three for concurrency behavior
  shell: |
    mv /opt/datical /opt/develop
    mkdir /opt/datical
    mv /opt/develop /opt/datical/.
    cp -R /opt/datical/develop /opt/datical/master
    cp -R /opt/datical/develop /opt/datical/production
    chown -R jenkins.jenkins /opt/datical
    chmod -R g+rwX /opt/datical
  args:
    creates: /opt/datical/production

- name: Create the datical repo
  unarchive:
    src: datical.tgz
    dest: /var/lib/jenkins

- name: Set permissions on the datical repo
  shell: |
    chown -R git.git datical
  args:
      chdir: /var/lib/jenkins
  become: true

- name: Clone the datical repo
  git:
    dest: /tmp/datical
    repo: git@localhost:/var/lib/jenkins/datical
    version: master
  retries: 3
  delay: 2
  become: no

- name: update the git commit
  lineinfile:
    path: /tmp/datical/deployPackager.properties
    regexp: "^pipeline1.sqlScmLastImportID="
    line: "pipeline1.sqlScmLastImportID={{gitlog.stdout}}"
  register: task_result

- name: Commit and push the master, production, and develop branch
  shell: |
    git add -A
    git commit -m "updated git commit"
    git push origin master
  args:
    chdir: /tmp/datical
  become: no
  when: task_result is changed

- name: tar up datical repo for restore
  shell: | 
    tar cvzf datical.tgz datical
  args:
    chdir: /var/lib/jenkins
  become: yes
